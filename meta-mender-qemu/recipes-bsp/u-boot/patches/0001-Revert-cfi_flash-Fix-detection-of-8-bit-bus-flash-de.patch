From e724f30bb5a59256ab06e9f5e5c09aa1b4b20781 Mon Sep 17 00:00:00 2001
From: Kristian Amlie <kristian.amlie@northern.tech>
Date: Tue, 17 Aug 2021 14:12:26 +0200
Subject: [PATCH 1/1] Revert "cfi_flash: Fix detection of 8-bit bus flash
 devices via address shift"

This is related to the function `flash_detect_cfi`. Before the
`chip_lsb` variable was added, this function configured the
`vexpress-qemu-flash` board correctly. But with the addition of that
variable and extra check, it now returns too early, with `chip_lsb`
set to 1, which does not work in the `vexpress-qemu-flash`
configuration. The exact details of why this fails are lost on me,
hence this full revert.

This reverts commit 53879b17382fa4108c57128aefd9a04305607e0a.

Signed-off-by: Kristian Amlie <kristian.amlie@northern.tech>
---
 drivers/mtd/cfi_flash.c | 37 ++++---------------------------------
 include/flash.h         |  2 --
 2 files changed, 4 insertions(+), 35 deletions(-)

diff --git a/drivers/mtd/cfi_flash.c b/drivers/mtd/cfi_flash.c
index 9c27fea5d8..f2e08dba3e 100644
--- a/drivers/mtd/cfi_flash.c
+++ b/drivers/mtd/cfi_flash.c
@@ -218,7 +218,7 @@ flash_map(flash_info_t *info, flash_sect_t sect, uint offset)
 {
 	unsigned int byte_offset = offset * info->portwidth;
 
-	return (void *)(info->start[sect] + (byte_offset << info->chip_lsb));
+	return (void *)(info->start[sect] + byte_offset);
 }
 
 static inline void flash_unmap(flash_info_t *info, flash_sect_t sect,
@@ -1918,27 +1918,12 @@ static int __flash_detect_cfi(flash_info_t *info, struct cfi_qry *qry)
 			flash_read_cfi(info, qry, FLASH_OFFSET_CFI_RESP,
 				       sizeof(struct cfi_qry));
 			info->interface	= le16_to_cpu(qry->interface_desc);
-			/* Some flash chips can support multiple bus widths.
-			 * In this case, override the interface width and
-			 * limit it to the port width.
-			 */
-			if ((info->interface == FLASH_CFI_X8X16) &&
-					(info->portwidth == FLASH_CFI_8BIT)) {
-				debug("Overriding 16-bit interface width to"
-						" 8-bit port width\n");
-				info->interface = FLASH_CFI_X8;
-			} else if ((info->interface == FLASH_CFI_X16X32) &&
-					(info->portwidth == FLASH_CFI_16BIT)) {
-				debug("Overriding 16-bit interface width to"
-						" 16-bit port width\n");
-				info->interface = FLASH_CFI_X16;
-			}
 
 			info->cfi_offset = flash_offset_cfi[cfi_offset];
 			debug("device interface is %d\n",
 			      info->interface);
-			debug("found port %d chip %d chip_lsb %d ",
-			      info->portwidth, info->chipwidth, info->chip_lsb);
+			debug("found port %d chip %d ",
+			      info->portwidth, info->chipwidth);
 			debug("port %d bits chip %d bits\n",
 			      info->portwidth << CFI_FLASH_SHIFT_WIDTH,
 			      info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
@@ -1977,23 +1962,9 @@ static int flash_detect_cfi(flash_info_t *info, struct cfi_qry *qry)
 	     info->portwidth <= FLASH_CFI_64BIT; info->portwidth <<= 1) {
 		for (info->chipwidth = FLASH_CFI_BY8;
 		     info->chipwidth <= info->portwidth;
-		     info->chipwidth <<= 1) {
-			/*
-			 * First, try detection without shifting the addresses
-			 * for 8bit devices (16bit wide connection)
-			 */
-			info->chip_lsb = 0;
+		     info->chipwidth <<= 1)
 			if (__flash_detect_cfi(info, qry))
 				return 1;
-
-			/*
-			 * Not detected, so let's try with shifting
-			 * for 8bit devices
-			 */
-			info->chip_lsb = 1;
-			if (__flash_detect_cfi(info, qry))
-				return 1;
-		}
 	}
 	debug("not found\n");
 	return 0;
diff --git a/include/flash.h b/include/flash.h
index 42b18a6047..3bf6b22399 100644
--- a/include/flash.h
+++ b/include/flash.h
@@ -24,8 +24,6 @@ typedef struct {
 #ifdef CONFIG_SYS_FLASH_CFI
 	uchar	portwidth;		/* the width of the port		*/
 	uchar	chipwidth;		/* the width of the chip		*/
-	uchar	chip_lsb;		/* extra Least Significant Bit in the */
-					/* address of chip	*/
 	ushort	buffer_size;		/* # of bytes in write buffer		*/
 	ulong	erase_blk_tout;		/* maximum block erase timeout		*/
 	ulong	write_tout;		/* maximum write timeout		*/
-- 
2.17.1

